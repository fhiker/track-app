import {
  createRequest,
  filter,
  makeErrorResult,
  makeOperation,
  makeSubject,
  map,
  merge,
  onStart,
  take,
  toPromise
} from "./chunk-6UYQSB3T.js";
import "./chunk-UXIASGQL.js";

// node_modules/@urql/exchange-auth/dist/urql-exchange-auth.mjs
var addAuthAttemptToOperation = (t, e) => makeOperation(t.kind, t, {
  ...t.context,
  authAttempt: e
});
function authExchange(s) {
  return ({ client: f, forward: d }) => {
    var l = /* @__PURE__ */ new Set();
    var p = makeSubject();
    var x = makeSubject();
    var A = /* @__PURE__ */ new Map();
    function flushQueue() {
      v = void 0;
      var t = A;
      A = /* @__PURE__ */ new Map();
      t.forEach(p.next);
    }
    function errorQueue(t) {
      v = void 0;
      var e = A;
      A = /* @__PURE__ */ new Map();
      e.forEach((e2) => {
        x.next(makeErrorResult(e2, t));
      });
    }
    var v;
    var w = null;
    return (t) => {
      function initAuth() {
        v = Promise.resolve().then(() => s({
          mutate(t2, n, r) {
            var u = f.createRequestOperation("mutation", createRequest(t2, n), r);
            return toPromise(take(1)(filter((t3) => t3.operation.key === u.key && u.context._instance === t3.operation.context._instance)(onStart(() => {
              var t3 = addAuthToOperation(u);
              l.add(t3.context._instance);
              p.next(t3);
            })(E))));
          },
          appendHeaders(t2, e) {
            var n = "function" == typeof t2.context.fetchOptions ? t2.context.fetchOptions() : t2.context.fetchOptions || {};
            return makeOperation(t2.kind, t2, {
              ...t2.context,
              fetchOptions: {
                ...n,
                headers: {
                  ...n.headers,
                  ...e
                }
              }
            });
          }
        })).then((t2) => {
          if (t2) {
            w = t2;
          }
          flushQueue();
        }).catch((t2) => {
          if (true) {
            console.warn("authExchange()’s initialization function has failed, which is unexpected.\nIf your initialization function is expected to throw/reject, catch this error and handle it explicitly.\nUnless this error is handled it’ll be passed onto any `OperationResult` instantly and authExchange() will block further operations and retry.", t2);
          }
          errorQueue(t2);
        });
      }
      initAuth();
      function refreshAuth(t2) {
        A.set(t2.key, addAuthAttemptToOperation(t2, true));
        if (w && !v) {
          v = w.refreshAuth().then(flushQueue).catch(errorQueue);
        }
      }
      function addAuthToOperation(t2) {
        return w ? w.addAuthToOperation(t2) : t2;
      }
      var h = filter(Boolean)(map((t2) => {
        if ("teardown" === t2.kind) {
          A.delete(t2.key);
          return t2;
        } else if (t2.context._instance && l.has(t2.context._instance)) {
          return t2;
        } else if (t2.context.authAttempt) {
          return addAuthToOperation(t2);
        } else if (v || !w) {
          if (!v) {
            initAuth();
          }
          if (!A.has(t2.key)) {
            A.set(t2.key, addAuthAttemptToOperation(t2, false));
          }
          return null;
        } else if (function willAuthError(t3) {
          return !t3.context.authAttempt && w && w.willAuthError && w.willAuthError(t3);
        }(t2)) {
          refreshAuth(t2);
          return null;
        }
        return addAuthToOperation(addAuthAttemptToOperation(t2, false));
      })(merge([p.source, t])));
      var E = d(h);
      return merge([x.source, filter((t2) => {
        if (!l.has(t2.operation.context._instance) && t2.error && function didAuthError(t3) {
          return w && w.didAuthError && w.didAuthError(t3.error, t3.operation);
        }(t2) && !t2.operation.context.authAttempt) {
          refreshAuth(t2.operation);
          return false;
        }
        if (l.has(t2.operation.context._instance)) {
          l.delete(t2.operation.context._instance);
        }
        return true;
      })(E)]);
    };
  };
}
export {
  authExchange
};
//# sourceMappingURL=@urql_exchange-auth.js.map
